// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub_to_agent.proto

package idl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CheckUpgradeStatusRequest struct {
}

func (m *CheckUpgradeStatusRequest) Reset()                    { *m = CheckUpgradeStatusRequest{} }
func (m *CheckUpgradeStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckUpgradeStatusRequest) ProtoMessage()               {}
func (*CheckUpgradeStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CheckUpgradeStatusReply struct {
	ProcessList string `protobuf:"bytes,1,opt,name=process_list,json=processList" json:"process_list,omitempty"`
}

func (m *CheckUpgradeStatusReply) Reset()                    { *m = CheckUpgradeStatusReply{} }
func (m *CheckUpgradeStatusReply) String() string            { return proto.CompactTextString(m) }
func (*CheckUpgradeStatusReply) ProtoMessage()               {}
func (*CheckUpgradeStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CheckUpgradeStatusReply) GetProcessList() string {
	if m != nil {
		return m.ProcessList
	}
	return ""
}

type FileSysUsage struct {
	Filesystem string  `protobuf:"bytes,1,opt,name=filesystem" json:"filesystem,omitempty"`
	Usage      float64 `protobuf:"fixed64,2,opt,name=usage" json:"usage,omitempty"`
}

func (m *FileSysUsage) Reset()                    { *m = FileSysUsage{} }
func (m *FileSysUsage) String() string            { return proto.CompactTextString(m) }
func (*FileSysUsage) ProtoMessage()               {}
func (*FileSysUsage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *FileSysUsage) GetFilesystem() string {
	if m != nil {
		return m.Filesystem
	}
	return ""
}

func (m *FileSysUsage) GetUsage() float64 {
	if m != nil {
		return m.Usage
	}
	return 0
}

type CheckDiskUsageRequestToAgent struct {
}

func (m *CheckDiskUsageRequestToAgent) Reset()                    { *m = CheckDiskUsageRequestToAgent{} }
func (m *CheckDiskUsageRequestToAgent) String() string            { return proto.CompactTextString(m) }
func (*CheckDiskUsageRequestToAgent) ProtoMessage()               {}
func (*CheckDiskUsageRequestToAgent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type CheckDiskUsageReplyFromAgent struct {
	ListOfFileSysUsage []*FileSysUsage `protobuf:"bytes,1,rep,name=list_of_file_sys_usage,json=listOfFileSysUsage" json:"list_of_file_sys_usage,omitempty"`
}

func (m *CheckDiskUsageReplyFromAgent) Reset()                    { *m = CheckDiskUsageReplyFromAgent{} }
func (m *CheckDiskUsageReplyFromAgent) String() string            { return proto.CompactTextString(m) }
func (*CheckDiskUsageReplyFromAgent) ProtoMessage()               {}
func (*CheckDiskUsageReplyFromAgent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CheckDiskUsageReplyFromAgent) GetListOfFileSysUsage() []*FileSysUsage {
	if m != nil {
		return m.ListOfFileSysUsage
	}
	return nil
}

func init() {
	proto.RegisterType((*CheckUpgradeStatusRequest)(nil), "idl.CheckUpgradeStatusRequest")
	proto.RegisterType((*CheckUpgradeStatusReply)(nil), "idl.CheckUpgradeStatusReply")
	proto.RegisterType((*FileSysUsage)(nil), "idl.FileSysUsage")
	proto.RegisterType((*CheckDiskUsageRequestToAgent)(nil), "idl.CheckDiskUsageRequestToAgent")
	proto.RegisterType((*CheckDiskUsageReplyFromAgent)(nil), "idl.CheckDiskUsageReplyFromAgent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommandListener service

type CommandListenerClient interface {
	CheckUpgradeStatus(ctx context.Context, in *CheckUpgradeStatusRequest, opts ...grpc.CallOption) (*CheckUpgradeStatusReply, error)
	CheckDiskUsageOnAgents(ctx context.Context, in *CheckDiskUsageRequestToAgent, opts ...grpc.CallOption) (*CheckDiskUsageReplyFromAgent, error)
}

type commandListenerClient struct {
	cc *grpc.ClientConn
}

func NewCommandListenerClient(cc *grpc.ClientConn) CommandListenerClient {
	return &commandListenerClient{cc}
}

func (c *commandListenerClient) CheckUpgradeStatus(ctx context.Context, in *CheckUpgradeStatusRequest, opts ...grpc.CallOption) (*CheckUpgradeStatusReply, error) {
	out := new(CheckUpgradeStatusReply)
	err := grpc.Invoke(ctx, "/idl.CommandListener/CheckUpgradeStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandListenerClient) CheckDiskUsageOnAgents(ctx context.Context, in *CheckDiskUsageRequestToAgent, opts ...grpc.CallOption) (*CheckDiskUsageReplyFromAgent, error) {
	out := new(CheckDiskUsageReplyFromAgent)
	err := grpc.Invoke(ctx, "/idl.CommandListener/CheckDiskUsageOnAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommandListener service

type CommandListenerServer interface {
	CheckUpgradeStatus(context.Context, *CheckUpgradeStatusRequest) (*CheckUpgradeStatusReply, error)
	CheckDiskUsageOnAgents(context.Context, *CheckDiskUsageRequestToAgent) (*CheckDiskUsageReplyFromAgent, error)
}

func RegisterCommandListenerServer(s *grpc.Server, srv CommandListenerServer) {
	s.RegisterService(&_CommandListener_serviceDesc, srv)
}

func _CommandListener_CheckUpgradeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUpgradeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandListenerServer).CheckUpgradeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CommandListener/CheckUpgradeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandListenerServer).CheckUpgradeStatus(ctx, req.(*CheckUpgradeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandListener_CheckDiskUsageOnAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDiskUsageRequestToAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandListenerServer).CheckDiskUsageOnAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CommandListener/CheckDiskUsageOnAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandListenerServer).CheckDiskUsageOnAgents(ctx, req.(*CheckDiskUsageRequestToAgent))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommandListener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "idl.CommandListener",
	HandlerType: (*CommandListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUpgradeStatus",
			Handler:    _CommandListener_CheckUpgradeStatus_Handler,
		},
		{
			MethodName: "CheckDiskUsageOnAgents",
			Handler:    _CommandListener_CheckDiskUsageOnAgents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hub_to_agent.proto",
}

func init() { proto.RegisterFile("hub_to_agent.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x41, 0x6b, 0xf2, 0x40,
	0x10, 0x35, 0x9f, 0x7c, 0x85, 0x8e, 0x42, 0xe9, 0x50, 0xac, 0xb5, 0x22, 0xba, 0x27, 0x4f, 0x1e,
	0xec, 0xb5, 0x97, 0xa2, 0xf5, 0x54, 0x10, 0xa2, 0x9e, 0xb7, 0xd1, 0x8c, 0xba, 0xb8, 0xc9, 0xa6,
	0x99, 0xcd, 0x21, 0x3f, 0xb1, 0xff, 0xaa, 0xec, 0x2a, 0x34, 0x45, 0x3d, 0xee, 0x7b, 0xf3, 0x66,
	0xde, 0x7b, 0x0b, 0xb8, 0x2f, 0xd6, 0xd2, 0x1a, 0x19, 0xed, 0x28, 0xb5, 0xa3, 0x2c, 0x37, 0xd6,
	0x60, 0x5d, 0xc5, 0x5a, 0x3c, 0xc3, 0xd3, 0x64, 0x4f, 0x9b, 0xc3, 0x2a, 0xdb, 0xe5, 0x51, 0x4c,
	0x0b, 0x1b, 0xd9, 0x82, 0x43, 0xfa, 0x2a, 0x88, 0xad, 0x78, 0x85, 0xc7, 0x4b, 0x64, 0xa6, 0x4b,
	0x1c, 0x40, 0x33, 0xcb, 0xcd, 0x86, 0x98, 0xa5, 0x56, 0x6c, 0xdb, 0x41, 0x3f, 0x18, 0xde, 0x86,
	0x8d, 0x13, 0xf6, 0xa1, 0xd8, 0x8a, 0x29, 0x34, 0x67, 0x4a, 0xd3, 0xa2, 0xe4, 0x15, 0x47, 0x3b,
	0xc2, 0x1e, 0xc0, 0x56, 0x69, 0xe2, 0x92, 0x2d, 0x25, 0x27, 0x41, 0x05, 0xc1, 0x07, 0xf8, 0x5f,
	0xb8, 0xc1, 0xf6, 0xbf, 0x7e, 0x30, 0x0c, 0xc2, 0xe3, 0x43, 0xf4, 0xa0, 0xeb, 0x3d, 0x4c, 0x15,
	0x1f, 0xfc, 0x9e, 0x93, 0xb9, 0xa5, 0x79, 0x73, 0x59, 0x04, 0x9d, 0xf3, 0x99, 0x2e, 0x67, 0xb9,
	0x49, 0x3c, 0x8f, 0xef, 0xd0, 0x72, 0x06, 0xa5, 0xd9, 0x4a, 0x77, 0x4b, 0x72, 0xc9, 0xf2, 0x78,
	0x26, 0xe8, 0xd7, 0x87, 0x8d, 0xf1, 0xfd, 0x48, 0xc5, 0x7a, 0x54, 0x35, 0x1a, 0xa2, 0x13, 0xcc,
	0xb7, 0x55, 0x6c, 0xfc, 0x1d, 0xc0, 0xdd, 0xc4, 0x24, 0x49, 0x94, 0xc6, 0x2e, 0x1c, 0xa5, 0x94,
	0xe3, 0x12, 0xf0, 0xbc, 0x1e, 0xec, 0xf9, 0x85, 0x57, 0x4b, 0xed, 0x74, 0xaf, 0xf2, 0x99, 0x2e,
	0x45, 0x0d, 0x3f, 0xa1, 0xf5, 0x37, 0xd0, 0x3c, 0xf5, 0x49, 0x18, 0x07, 0xbf, 0xca, 0x2b, 0x6d,
	0x74, 0x2e, 0x8f, 0x54, 0x0b, 0x11, 0xb5, 0xf5, 0x8d, 0xff, 0xff, 0x97, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x99, 0xeb, 0x80, 0xe7, 0x15, 0x02, 0x00, 0x00,
}
